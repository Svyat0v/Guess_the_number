from dotenv import load_dotenv
from management import init_db, add_user, get_stats, update_stats
import os
import random
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from photo_cat import get_photo_cat


load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞–Ω–∏–µ gamedb.sql
init_db()

# –ò–≥—Ä–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
user_data = {}


@bot.message_handler(commands=['start'])
def start_bot(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞."""
    add_user(message.from_user.id, message.from_user.username)
    markup = InlineKeyboardMarkup()
    button_1 = InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data="begin")
    button_stats = InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data="stats")
    markup.add(button_1, button_stats)
    bot.send_message(
        message.chat.id,
        text=f'üëã –ü—Ä–∏–≤–µ—Ç {message.from_user.username}, '
             f'—Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ?'
             '\nü§î –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å".'
             '\n–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –±—É–¥—É—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.',
        reply_markup=markup
    )


@bot.message_handler(commands=['help'])
def help_bot(message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞."""
    bot.send_message(
        message.chat.id,
        text="–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã. –ë–æ—Ç –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, "
             "–Ω–∞–¥–æ –±—É–¥–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥–∞–¥–∞–ª –±–æ—ÇüòÅ. "
             "–ù–û —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ 6 –ø–æ–ø—ã—Ç–æ–∫, —Ç–∞–∫–∂–µ –æ–Ω –±—É–¥–µ—Ç —Ç–µ–±–µ "
             "–ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ. –ï—Å–ª–∏ —Ç—ã "
             "–≥–æ—Ç–æ–≤ ... –∏ —Ö–æ—Ä–æ—à–µ–π —Ç–µ–±–µ –∏–≥—Ä—ã."
    )


@bot.callback_query_handler(func=lambda call:True)
def user_number_registration(call):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if call.data == "stats":
        user_id = call.from_user.id
        games, winning = get_stats(user_id)
        bot.send_message(
            call.message.chat.id,
            text=f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {call.message.from_user.username}"
                 f"\nüéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games}"
                 f"\nüèÜ –ü–æ–±–µ–¥: {winning}"
        )
        send_play_again_button(call.message.chat.id)

    if call.data == "begin":
        user_id = call.from_user.id
        user_data[user_id] = {
            "number": random.randint(1, 100),
            "attempt": 6
        }
        bot.send_message(
            call.message.chat.id,
            text="–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100."
        )
        bot.register_next_step_handler(call.message, game_logic)


@bot.message_handler()
def send_play_again_button(chat_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã."""
    markup = InlineKeyboardMarkup()
    button_2 = InlineKeyboardButton(
        text="üé≤ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑ üé≤",
        callback_data="begin"
    )
    markup.add(button_2)
    bot.send_message(
        chat_id,
        text="–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑?",
        reply_markup=markup
    )


def game_logic(message):
    """–ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞."""
    user_id = message.from_user.id

    if user_id not in user_data:
        bot.send_message(message.chat.id, text="‚ùó –ù–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.")

    try:
        number_user = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, text="üé≤ –Ø –∂–¥—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, game_logic)
        return

    target_number = user_data[user_id]["number"]
    attempt = user_data[user_id]["attempt"]

    if attempt > 0:
        if number_user == target_number:
            bot.send_photo(message.chat.id, get_photo_cat())
            bot.send_message(
                message.chat.id,
                text=f"üéâ –ú–æ–ª–æ–¥–µ—Ü, —Ç—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: {target_number}"
                     f"\nüêà –î–µ—Ä–∂–∏ –∫–æ—Ç–∏–∫–∞."
            )
            update_stats(user_id, winning=True)
            user_data.pop(user_id)
            send_play_again_button(message.chat.id)
            return

        else:
            attempt -= 1
            user_data[user_id]["attempt"] = attempt
            hint = "–ú–µ–Ω—å—à–µüëá" if number_user > target_number else "–ë–æ–ª—å—à–µüëÜ"
            bot.send_message(
                message.chat.id,
                text=f"{hint}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempt}"
            )

            if attempt > 0:
                bot.register_next_step_handler(message, game_logic)
            else:
                bot.send_message(message.chat.id, "‚ùå –£–≤—ã, –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                update_stats(user_id, winning=False)
                user_data.pop(user_id)
                send_play_again_button(message.chat.id)


def main():
    bot.polling(non_stop=True)


if __name__ == "__main__":
    print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù...")
    main()
    print("–ë–û–¢ –ó–ê–í–ï–†–®–ò–õ –°–ï–ê–ù–°.")

# –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).
# –£–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —á–∏—Å–µ–ª.
